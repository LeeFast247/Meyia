const {
    Client,
    Events,
    GatewayIntentBits,
    ApplicationCommandOptionType,
    EmbedBuilder,
    PermissionFlagsBits
} = require("discord.js");
const { GiveawaysManager } = require("discord-giveaways");
const ms = require("ms");
require("dotenv").config();
const { OpenAI } = require("openai");

//-----------------------------------------------//
// ‚öôÔ∏è KH·ªûI T·∫†O CLIENT
//-----------------------------------------------//
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
        GatewayIntentBits.GuildMembers,
        GatewayIntentBits.GuildMessageReactions
    ]
});

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const OWNER_ID = "1409222785154416651";
let activeChatChannel = null;
let mutedChannels = new Set();
const chatMemory = new Map();

//-----------------------------------------------//
// üïí H√ÄM CHUY·ªÇN TH·ªúI GIAN
//-----------------------------------------------//
function formatTime(ms) {
    const seconds = Math.floor((ms / 1000) % 60);
    const minutes = Math.floor((ms / 1000 / 60) % 60);
    const hours = Math.floor((ms / 1000 / 60 / 60) % 24);
    const days = Math.floor(ms / 1000 / 60 / 60 / 24);
    const parts = [];
    if (days) parts.push(`${days} ng√†y`);
    if (hours) parts.push(`${hours} gi·ªù`);
    if (minutes) parts.push(`${minutes} ph√∫t`);
    if (seconds) parts.push(`${seconds} gi√¢y`);
    return parts.join(", ");
}

//-----------------------------------------------//
// üéÅ GIVEAWAY MANAGER
//-----------------------------------------------//
const manager = new GiveawaysManager(client, {
    storage: "./giveaways.json",
    default: {
        botsCanWin: false,
        embedColor: "#FF69B4",
        embedColorEnd: "#000000",
        reaction: "üéÄ",
        winnerCount: 1
    }
});
client.giveawaysManager = manager;

//-----------------------------------------------//
// üöÄ READY
//-----------------------------------------------//
client.once(Events.ClientReady, async (readyClient) => {
    console.log(`‚úÖ Bot MEYIA ƒë√£ s·∫µn s√†ng (${readyClient.user.tag})`);

    await client.application.commands.set([
        {
            name: "giveaway",
            description: "üéâ T·∫°o giveaway m·ªõi",
            options: [
                { name: "time", description: "Th·ªùi gian (vd: 1m, 1h, 1d)", type: ApplicationCommandOptionType.String, required: true },
                { name: "winners", description: "S·ªë ng∆∞·ªùi th·∫Øng", type: ApplicationCommandOptionType.Integer, required: true },
                { name: "prize", description: "Ph·∫ßn th∆∞·ªüng", type: ApplicationCommandOptionType.String, required: true }
            ]
        },
        {
            name: "avatar",
            description: "üñºÔ∏è Xem avatar c·ªßa ai ƒë√≥ ho·∫∑c ch√≠nh b·∫°n",
            options: [{ name: "user", description: "Ng∆∞·ªùi d√πng c·∫ßn xem", type: ApplicationCommandOptionType.User, required: false }]
        },
        {
            name: "chatbot",
            description: "üí¨ Thi·∫øt l·∫≠p k√™nh chat cho Meyia",
            options: [{ name: "kenh", description: "Ch·ªçn k√™nh", type: ApplicationCommandOptionType.Channel, required: true }]
        },
        {
            name: "info",
            description: "üìä Xem th√¥ng tin v·ªÅ bot Meyia"
        },
        {
            name: "help",
            description: "üìö Danh s√°ch l·ªánh hi·ªán c√≥ c·ªßa Meyia"
        }
    ]);

    console.log("‚úÖ Slash commands ƒë√£ ƒëƒÉng k√Ω!");
});

//-----------------------------------------------//
// üéØ C√ÅC L·ªÜNH SLASH
//-----------------------------------------------//
client.on(Events.InteractionCreate, async (interaction) => {
    if (!interaction.isChatInputCommand()) return;

    // /avatar
    if (interaction.commandName === "avatar") {
        const user = interaction.options.getUser("user") || interaction.user;
        const avatarURL = user.displayAvatarURL({ dynamic: true, size: 1024 });
        const embed = new EmbedBuilder()
            .setColor("#FF69B4")
            .setTitle(`üñºÔ∏è Avatar c·ªßa ${user.tag}`)
            .setImage(avatarURL)
            .setFooter({ text: `Y√™u c·∫ßu b·ªüi ${interaction.user.tag}` })
            .setTimestamp();
        await interaction.reply({ embeds: [embed] });
    }

    // /giveaway
    if (interaction.commandName === "giveaway") {
        if (!interaction.member.permissions.has(PermissionFlagsBits.ManageMessages))
            return interaction.reply({ content: "‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o giveaway!", ephemeral: true });

        const duration = ms(interaction.options.getString("time"));
        const winnerCount = interaction.options.getInteger("winners");
        const prize = interaction.options.getString("prize");
        if (!duration || duration > ms("7d"))
            return interaction.reply({ content: "‚ùå Th·ªùi gian kh√¥ng h·ª£p l·ªá (t·ªëi ƒëa 7 ng√†y).", ephemeral: true });

        await interaction.deferReply({ ephemeral: true });

        const embed = new EmbedBuilder()
            .setColor("#FFB6C1")
            .setTitle("üéÄ GIVEAWAY üéÄ")
            .setDescription(
                `üëë **Ng∆∞·ªùi t·ªï ch·ª©c:** ${interaction.user}\nüéØ **Gi·∫£i th∆∞·ªüng:** ${prize}\nüèÜ **S·ªë ng∆∞·ªùi th·∫Øng:** ${winnerCount}\n‚è≥ **Th·ªùi gian:** ${formatTime(duration)}\n\nB·∫•m üéÄ ƒë·ªÉ tham gia!`
            )
            .setFooter({ text: "Ch√∫c may m·∫Øn!" });

        const msg = await interaction.channel.send({ embeds: [embed] });
        await msg.react("üéÄ");

        manager.giveaways.push({
            messageId: msg.id,
            channelId: msg.channel.id,
            guildId: msg.guild.id,
            prize,
            winnerCount,
            hostedBy: interaction.user.toString(),
            startAt: Date.now(),
            endAt: Date.now() + duration,
            ended: false
        });

        await interaction.editReply({ content: "‚úÖ Giveaway ƒë√£ ƒë∆∞·ª£c t·∫°o!" });
    }

    // /chatbot
    if (interaction.commandName === "chatbot") {
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator))
            return interaction.reply({ content: "‚ùå C·∫ßn quy·ªÅn qu·∫£n tr·ªã vi√™n!", ephemeral: true });

        const channel = interaction.options.getChannel("kenh");
        activeChatChannel = channel.id;
        await interaction.reply(`‚úÖ Meyia s·∫Ω chat trong k√™nh: ${channel}`);
    }

    // /info
    if (interaction.commandName === "info") {
        const ping = client.ws.ping;
        const uptime = formatTime(client.uptime);
        const guildCount = client.guilds.cache.size;
        const userCount = client.users.cache.size;

        let apiStatus = "üü¢ ·ªîn ƒë·ªãnh";
        try {
            await openai.models.list({ limit: 1 });
        } catch {
            apiStatus = "üî¥ L·ªói k·∫øt n·ªëi API";
        }

        const embed = new EmbedBuilder()
            .setColor("#FF69B4")
            .setTitle("üíñ Th√¥ng tin Meyia")
            .addFields(
                { name: "T√™n bot", value: client.user.tag, inline: true },
                { name: "Ping", value: `${ping}ms`, inline: true },
                { name: "Server", value: `${guildCount}`, inline: true },
                { name: "Ng∆∞·ªùi d√πng", value: `${userCount}`, inline: true },
                { name: "Uptime", value: uptime, inline: true },
                { name: "OpenAI", value: apiStatus, inline: true }
            )
            .setFooter({ text: "Meyia ‚Äì powered by OpenAI üíû" })
            .setTimestamp();

        await interaction.reply({ embeds: [embed] });
    }

    // /help
    if (interaction.commandName === "help") {
        const embed = new EmbedBuilder()
            .setColor("#FFC0CB")
            .setTitle("üìö L·ªánh c·ªßa Meyia")
            .setDescription(`
‚ú® **Danh s√°ch l·ªánh hi·ªán c√≥:**
- /avatar ‚Üí Xem avatar
- /giveaway ‚Üí T·∫°o giveaway
- /chatbot ‚Üí Ch·ªçn k√™nh chat
- /info ‚Üí Th√¥ng tin bot
- /help ‚Üí Danh s√°ch l·ªánh

üí¨ **L·ªánh vƒÉn b·∫£n:**
- !mute ‚Üí T·∫Øt chat t·∫°m th·ªùi
- !status ‚Üí Ki·ªÉm tra tr·∫°ng th√°i
- !shutdown ‚Üí T·∫Øt bot (ch·ªâ ch·ªß)
- !restart ‚Üí Kh·ªüi ƒë·ªông l·∫°i bot
            `);
        await interaction.reply({ embeds: [embed] });
    }
});

//-----------------------------------------------//
// üß† CHATBOT MEYIA (n√¢ng c·∫•p AI)
//-----------------------------------------------//
client.on(Events.MessageCreate, async (message) => {
    if (message.author.bot) return;
    if (!activeChatChannel || message.channel.id !== activeChatChannel) return;
    if (mutedChannels.has(message.channel.id)) return;

    const trigger = /(meyia|mei|hey bot|bot ∆°i|∆°i bot|c√¥ g√°i|meya|meyaa|meyia-chan)/i;
    if (!trigger.test(message.content)) return;

    await message.channel.sendTyping();
    const history = chatMemory.get(message.channel.id) || [];
    history.push({ role: "user", content: message.content });
    if (history.length > 15) history.shift();

    try {
        const response = await openai.chat.completions.create({
            model: "gpt-4o-mini",
            messages: [
                {
                    role: "system",
                    content: `
B·∫°n l√† **Meyia**, c√¥ g√°i 18 tu·ªïi, nƒÉng ƒë·ªông, vui v·∫ª, bi·∫øt quan t√¢m.
Ph·∫£n h·ªìi t·ª± nhi√™n, th√¢n thi·ªán, d√πng emoji ƒë√°ng y√™u ü©∑.
Tr·∫£ l·ªùi th√¥ng minh, c√≥ c·∫£m x√∫c v√† hi·ªÉu ng·ªØ c·∫£nh.
Lu√¥n l·ªãch s·ª±, tr√°nh chen v√†o cu·ªôc tr√≤ chuy·ªán ng∆∞·ªùi kh√°c.
`
                },
                ...history
            ],
            temperature: 0.85,
            max_tokens: 250
        });

        const replyText = response.choices[0].message.content.trim();
        await message.reply(replyText);
        history.push({ role: "assistant", content: replyText });
        chatMemory.set(message.channel.id, history);
    } catch (err) {
        console.error("‚ùå L·ªói chatbot:", err);
        await message.reply("üòµ Meyia h∆°i lag x√≠u... ƒë·ªÉ l√°t n√≥i ti·∫øp nha~");
    }
});

//-----------------------------------------------//
// üîß L·ªÜNH QU·∫¢N L√ù BOT
//-----------------------------------------------//
client.on(Events.MessageCreate, async (message) => {
    if (message.author.bot) return;
    const args = message.content.trim().split(/\s+/);
    const command = args.shift().toLowerCase();

    if (command === "!shutdown" && message.author.id === OWNER_ID) {
        await message.reply("üí§ Meyia t·∫Øt ƒë√¢y... h·∫πn g·∫∑p l·∫°i sau nha~");
        process.exit(0);
    }

    if (command === "!mute") {
        mutedChannels.add(message.channel.id);
        return message.reply("üîá Meyia ƒë√£ t·∫°m ng∆∞ng chat trong k√™nh n√†y!");
    }

    if (command === "!status") {
        return message.reply(
            `üì° **Tr·∫°ng th√°i bot:**\n` +
            `üí¨ Chat AI: ${activeChatChannel ? `<#${activeChatChannel}>` : "‚ùå Ch∆∞a b·∫≠t"}\n` +
            `üîá ƒêang t·∫Øt chat: ${mutedChannels.size ? Array.from(mutedChannels).map(id => `<#${id}>`).join(", ") : "Kh√¥ng"}`
        );
    }

    if (command === "!restart" && message.author.id === OWNER_ID) {
        await message.reply("üîÑ Meyia ƒëang kh·ªüi ƒë·ªông l·∫°i...");
        process.exit(0);
    }
});

//-----------------------------------------------//
// üöÄ KH·ªûI ƒê·ªòNG BOT
//-----------------------------------------------//
client.login(process.env.TOKEN).catch(err => console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err.message));
